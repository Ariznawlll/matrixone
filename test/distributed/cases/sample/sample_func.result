/* data prepare for sample from single column */
drop table if exists s_t1;
create table s_t1 (c1 int, c2 int, c3 int);
insert into s_t1 values (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, null);
insert into s_t1 values (2, 1, 0);
insert into s_t1 values (2, 2, 0), (2, 2, null);
insert into s_t1 values (3, 1, null), (3, 2, null), (3, 2, null);
/* expected failed case */
/* 1. only support one sample function in a sql */
select c1, sample(c2, 1 rows), sample(c3, 1 rows) from s_t1;
SQL syntax error: cannot use more than one sample function at select clause.
/* 2. cannot fixed sample function (non-scalar function) and aggregate function (scalar function) */
select c1, max(c2), sample(c3, 1 rows) from s_t1;
SQL syntax error: cannot fixed non-scalar function and scalar function in the same query
/* 3. sample(column list, N rows) requires 1 <= N <= 1000 */
select sample(c1, 0 rows) from s_t1;
SQL syntax error: sample(expr list, N rows) requires N between 1 and 1000.
select sample(c1, 1001 rows) from s_t1;
SQL syntax error: sample(expr list, N rows) requires N between 1 and 1000.
/* 4. sample(column list, K percent) requires 0.00 <= K <= 100.00, should watch that 99.994 was accepted but will treat as 99.99 */
select sample(c1, -1 percent) from s_t1;
SQL parser error: You have an error in your SQL syntax; check the manual that corresponds to your MatrixOne server version for the right syntax to use. syntax error at line 1 column 28 near " percent) from s_t1";
select sample(c1, 101 percent) from s_t1;
SQL syntax error: sample(expr list, K percent) requires K between 0.00 and 100.00
select sample(c1, 100.01 percent) from s_t1;
SQL syntax error: sample(expr list, K percent) requires K between 0.00 and 100.00
/* 5. sample cannot be used in where clause */
select c1, c2, c3 from s_t1 where sample(c1, 1 rows) = 1;
expr 'sample' is not yet implemented
select c1, c2, c3 from s_t1 where sample(c1, 1 percent) = 1;
expr 'sample' is not yet implemented
/* expected succeed case */
/* 1. sample 2 rows from table by column c1 */
select count(*) from (select sample(c1, 2 rows) from s_t1);
count(*)
2
/* 2. sample 2 rows from table by column c2 */
select count(*) from (select sample(c2, 2 rows) from s_t1);
count(*)
2
/* 3. sample 2 rows from table by column c2 group by col1 */
select count(*) from (select sample(c2, 2 rows) from s_t1 group by c1);
count(*)
6
/* 4. sample 3 rows from table by column c3 where c1 = 2, expected to get only 2 rows because one row's c3 is null */
select sample(c3, 3 rows) from s_t1 where c1 = 2;
c3
0
0
/* 5. sample 3 rows from table by column c3 where c1 = 1, expected to get 3 rows (0),(1),(2) */
select c1, c2, sample(c3, 3 rows) from s_t1 where c1 = 1 order by c3;
c1    c2    c3
1    1    0
1    1    1
1    1    2
/* 6. sample 100 percent from table by column c3, expected to get all rows except null rows */
select sample(c3, 100 percent) from s_t1 order by c3;
c3
0
0
0
1
2
/* 7. sample 0 percent from table by column c1, expected to get empty */
select sample(c1, 0 percent) from s_t1;
c1
/* 8. some case I don't know how to describe it, in short, these cases should be OK */
select count(*) from (select c1, c2, sample(c2, 100 percent), c3 from s_t1);
count(*)
10
select count(*) from (select c1, sample(c2, 100 percent), c2, c3 from s_t1);
count(*)
10
/* 9. with limit */
select count(*) from (select sample(c2, 2 rows) from s_t1 limit 1);
count(*)
1
select count(*) from (select sample(c2, 2 rows) from s_t1 group by c1 limit 2);
count(*)
2
/* 10. with alias */
select sample(c3, 3 rows) as k from s_t1 where c1 = 2;
k
0
0
/* 11. sample from all invalid rows, should get only one invalid row */
select sample(c3, 1 rows) from s_t1 where c1 = 3;
c3
null
select sample(c3, 2 rows) from s_t1 where c1 = 3;
c3
null
select c1, sample(c3, 3 rows) from s_t1 where c1 = 3 group by c1;
c1    c3
3    null
select c1, sample(c3, 3 rows) from s_t1 group by c1 order by c1, c3;
c1    c3
1    0
1    1
1    2
2    0
2    0
3    null
/* 12. sample as and outer filter */
select * from (select c1, sample(c3, 3 rows) as k from s_t1 group by c1) where k < 2 order by c1, k;
c1    k
1    0
1    1
2    0
2    0
/* data prepare for sample from multi columns */
drop table if exists s_t2;
create table s_t2 (cc1 int, cc2 int);
insert into s_t2 values (1, 1), (null, 2), (3, null), (null, null);
/* expected failed case */
/* 1. multi sample with alias */
select sample(cc1, cc2, 1 rows) as k from s_t2;
SQL syntax error: sample multi columns cannot have alias
/* expected succeed case */
/* 1. sample 2 rows from table by column cc1, cc2, expected to get 3 rows because we should sample 2 not-null value for each column */
select count(*) from (select sample(cc1, cc2, 2 rows) from s_t2);
count(*)
3
/* 2. sample 100 percent from table by column cc1, cc2, expected to get all rows except (null, null) */
select sample(cc1, cc2, 100 percent) from s_t2 order by cc1 asc;
cc1    cc2
null    2
1    1
3    null
/* 3. sample 0 percent from table by column cc1, cc2, expected to get empty */
select sample(cc1, cc2, 0 percent) from s_t2;
cc1    cc2
/* data prepare for expression sample */
drop table if exists s_t3;
create table s_t3 (c1 int, c2 int);
insert into s_t3 values (1, 3), (2, 5), (3, 6), (4, 7), (5, 8);
/* expected failed case */
/* 1. sample(aggregate function, N rows) should failed */
select sample(max(c1), 1 rows) from s_t3;
SQL syntax error: cannot fixed non-scalar function and scalar function in the same query
/* expected succeed case */
/* 1. expression (not only simple column) should be OK */
select c1, sample(c1+1, 100 percent) from s_t3 order by c1;
c1    c1+1
1    2
2    3
3    4
4    5
5    6
-- The sample column is equal or larger than the original column
drop table if exists sample01;
create table sample01 (col1 int, col2 decimal(6), col3 varchar(30));
insert into sample01 values (1, null, 'database');
insert into sample01 values (2, 38291.32132, 'database ');
insert into sample01 values (3, null, 'database management system');
insert into sample01 values (4, 10, null);
insert into sample01 values (1, -321.321, null);
insert into sample01 values (2, -1, null);
select * from sample01;
select sample (col3, 3 rows) from sample01;
select sample (col3, 4 rows) as newCol3 from sample01;
select sample (col3, 3 rows) as newCol3 from sample01 where col3 is not null;
select sample (col3, 3 rows) from sample01 where col3 is null;
select sample (col2, 2 rows) from sample01 where col3 is null group by col1;
select col1, sample(col2, 20 rows) from sample01 group by col1 order by col1;

select col1, sample (col1 * 3, 4 rows) as newCol1 from sample01 where col2 is not null;
select col1,sample (col2 * 3, 10 rows) as newCol from sample01 group by col1;

-- nested with functions
select sample (reverse(col3), 4 rows) as newcol3 from sample01;
select col1, sample (startswith(col3, 'database'), 3 rows) from sample01;
select col1, sample (endswith(col3, 'system'), 3 rows) from sample01;
drop table sample01;

-- sample column is time type
drop table if exists sample02;
create table sample02 (col1 int, col2 datetime);
insert into sample02 values (1, '2020-10-13 10:10:10');
insert into sample02 values (2, null);
insert into sample02 values (1, '2021-10-10 00:00:00');
insert into sample02 values (2, '2023-01-01 12:12:12');
insert into sample02 values (2, null);
insert into sample02 values (3, null);
insert into sample02 values (4, '2023-11-27 01:02:03');
select * from sample02;
select sample (col2, 4 rows) from sample02 order by col2 desc;
-- @bvt:issue#12991
select sample (col2, 5 rows) from sample02 group by col1 order by col2;
select sample (col2, 100 percent) from sample02 group by col1 order by col2;
-- @bvt:issue
select sample (col2, 0 percent) from sample02 group by col1 order by col2 desc;
select col1, sample (col2, 5 rows) as newColumn from sample02 group by col1 order by col2;
drop table sample02;

-- sample multiple columns
drop table if exists sample03;
create table sample03 (col1 int, col2 float, col3 decimal, col4 enum('1','2','3','4'));
insert into sample03 values (1, 12.21, 32324.32131, 1);
insert into sample03 values (2, null, null, 2);
insert into sample03 values (2, -12.1, 34738, null);
insert into sample03 values (1, 90.2314, null, 4);
insert into sample03 values (1, 43425.4325, -7483.432, 2);
select * from sample03;
select sample(col1, col2, col3, col4, 2 rows) from sample03 where col2 != null and col4 is not null;
-- sample multi columns cannot have alias
select sample(col1, col2, col3, col4, 2 rows) from sample03 where col4 is not null;
select sample(col1, col2, col3, 4 rows) from sample03 where col4 is not null;
select sample(col1 + 100, col2 + 100, col3 + 100, 4 rows) from sample03 where col4 is not null;
select sample(col1 * 2, col2 * 3, col3, 100 rows) from sample03 where col1 = 2;
select sample(col1 * 2, col2 * 3, col3, 100 rows) from sample03 where col1 = 2 limit 1;
drop table sample03;

-- with prepare
drop table is exists sample04;
create table sample04 (col1 int, col2 binary);
insert into sample04 values (1, 'a');
insert into sample04 values (2, 'b');
insert into sample04 values (3, 'c');
insert into sample04 values (1, null);
insert into sample04 values (2, null);
insert into sample04 values (2, 'c');
prepare s1 from 'select col1, sample(col2, 4 rows) from sample04 group by col1';
execute s1;
prepare s2 from 'select col1, sample(col2, 100 percent) from sample04 group by col1 order by col1 desc';
execute s2;
drop table sample04;

-- sample from temporary table
drop table if exists sample05;
create temporary table sample05 (col1 int, col2 binary);
insert into sample05 values (1, 'a');
insert into sample05 values (2, 'b');
insert into sample05 values (3, 'c');
insert into sample05 values (1, null);
insert into sample05 values (2, null);
insert into sample05 values (2, 'c');
insert into sample05 (col1, col2) values (2, true);
select sample (col1, col2, 5 rows) from sample05;
select sample (col1, col2, 100 percent) from sample05;
select sample (col1, col2, 0 percent) from sample05;
drop table sample05;
